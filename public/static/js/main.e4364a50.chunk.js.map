{"version":3,"sources":["components/Pages/Film/Film.module.css","components/Pages/Home/Input/Input.module.css","components/Pages/Home/Results/FilmCard.module.css","components/Pages/Home/Home.module.css","components/Pages/Myfilms/MyFilms.module.css","components/App.module.css","components/Header/Header.js","components/Pages/Home/Input/Input.js","components/Pages/Home/Results/FilmCard.js","components/Pages/Home/Results/Results.js","components/Pages/Home/Home.js","util/localAPI.js","components/Pages/Film/Film.js","components/Pages/Myfilms/MyFilms.js","components/Pages/Pages.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","header","href","Input","props","className","styles","container","type","onKeyPress","handleKeyPress","placeholder","FilmCard","film","onClick","e","id","src","img","alt","title","body","Results","console","log","films","map","key","poster_path","overview","lastReq","fetchFilms","query","a","url","fetch","catch","err","response","json","data","Home","useState","setFilms","event","inputValue","target","value","results","home","getCollection","name","collection","JSON","parse","window","localStorage","getItem","error","updateCollection","collectionName","newCollection","stringify","setItem","Project","setFilm","getDetails","details","length","addClick","item","filter","push","api","original_title","add","backdrop_path","genres","undefined","genre","concat","getGenres","infos","release_date","status","popularity","original_language","MyFilms","Boolean","list","setList","card","Pages","cb","location","hash","setLocation","page","newState","pages","Film","setPages","hashChangeHandler","removeEventListener","addEventListener","style","display","justifyContent","alignItems","flexDirection","width","marginTop","button","newHash","buttonHandler","p","pageHandle","App","Header","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.e4364a50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Film_container__3wPvb\",\"infos\":\"Film_infos__3vhLP\",\"popularity\":\"Film_popularity__2UObS\",\"overview\":\"Film_overview__2DF0J\",\"add\":\"Film_add__1bKd7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__1B-CD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"film\":\"FilmCard_film__33zMQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__2E20P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyFilms_container__3efzV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3RbLa\",\"pages\":\"App_pages__NUR_0\"};","import React from 'react'\r\nimport './Header.module.css'\r\n\r\nconst header = () => {\r\n  return (\r\n    <header>\r\n      <h1 ><a href=\"#home\">mov!<span>F</span>etch</a></h1>\r\n    </header>\r\n  )\r\n}\r\nexport default header","import React from 'react'\r\nimport styles from './Input.module.css'\r\n\r\nconst Input = props => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <input type=\"text\" onKeyPress={props.handleKeyPress} placeholder=\"Rechercher un film\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styles from './FilmCard.module.css'\r\n\r\nconst FilmCard = props => {\r\n  return (\r\n    <div className={styles.film} onClick={e => props.onClick(e, props.id)}>\r\n      <img src={\"https://image.tmdb.org/t/p/original\"+props.img} alt=\"Poster\"/>\r\n      <div >\r\n      <h5>{props.title}</h5>\r\n      <p>{props.body}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilmCard\r\n","import React from 'react'\r\nimport FilmCard from './FilmCard'\r\nconst Results = props => {\r\n  console.log(\"From Results: \",props);\r\n  const populateResult = () => {\r\n    return props.films.map(film => {\r\n      return <FilmCard \r\n        key={film.id} \r\n        id={film.id}\r\n        title={film.title}\r\n        img={film.poster_path}\r\n        body={film.overview} \r\n        onClick={props.onClick}\r\n        />\r\n    })\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={'results'}>\r\n      {populateResult()}\r\n    </div>\r\n  )\r\n\r\n\r\n\r\n  \r\n}\r\n\r\nexport default Results\r\n","import React, { useState }from 'react'\r\nimport Input from './Input/Input'\r\nimport Results from './Results/Results'\r\nimport styles from './Home.module.css'\r\n\r\n\r\n//Store la derniere recherche\r\nlet lastReq = []\r\nconst Home = (props) => {\r\n  // eslint-disable-next-line\r\n  let requestPage = 1\r\n  const [films, setFilms] = useState(lastReq)\r\n  \r\n  const handleKeyPress = async event => {\r\n    if (event.key === \"Enter\"){\r\n      let inputValue = event.target.value;\r\n      let data = await fetchFilms(inputValue)\r\n      setFilms(data.results)\r\n      lastReq = data.results\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.home}>\r\n      <Input handleKeyPress={handleKeyPress}/>\r\n      <Results films= {films} onClick={props.onClick}/>\r\n    </div>\r\n  )\r\n}\r\nasync function fetchFilms(query){\r\n  let url = `/api/${query}`\r\n  let response = await fetch(url).catch(err => console.log(err))\r\n  let data = await response.json()\r\n  console.log(data);\r\n  return data\r\n}\r\nexport default Home\r\n","\r\n/*\r\n* Chaque item de localStorage est une collection\r\ncollectionName : [ {  }, {  }, {  }, ... ]\r\ntest:\r\nnewCollection(Partition)\r\n*/\r\n\r\n\r\nexport function newCollection(name) {\r\n  let stored = window.localStorage.getItem(name)\r\n  if(stored !== null) return console.error(\"!ERROR! A collection with this name already exist\");\r\n  window.localStorage.setItem(name, \"[]\")\r\n  let collection = {name: name, items : []}\r\n  return collection\r\n}\r\n\r\nexport function getCollection(name) {\r\n  const collection = JSON.parse(window.localStorage.getItem(name))\r\n  if(collection === null) return console.error(\"!ERROR! No collection of this name found\");\r\n  return collection\r\n}\r\n\r\nexport function getItem(collectionName, id){\r\n  const collection = getCollection(collectionName)\r\n  let item = collection.filter(e => e.id === id)\r\n  return item[0]\r\n}\r\n\r\nexport function addItem(collectionName, item){\r\n  \r\n  const collection = getCollection(collectionName)\r\n\r\n  if(collection.filter(e => e.id === item.id).length !== 0) return console.error(\"!ERROR! Item already exist in the collection, use updateItem instead\");\r\n\r\n  collection.push(item)\r\n  updateCollection(collectionName, collection)\r\n  return collection\r\n}\r\n\r\nexport function updateItem(collectionName, id, newItem){\r\n  if(typeof(newItem.id) !== \"string\") newItem.id = id\r\n  const collection = getCollection(collectionName)\r\n  collection.forEach((item, idx) => {\r\n    if (item.id === id){\r\n      collection[idx] = newItem\r\n      console.log(\"Item updated!\")\r\n      updateCollection(collectionName, collection)\r\n      return collection\r\n    }\r\n  })\r\n  return collection\r\n}\r\n\r\nexport function deleteItem(collectionName, id){\r\n  const collection = getCollection(collectionName)\r\n  let newCollection = collection.filter(e => e.id !== id)\r\n  updateCollection(collectionName, newCollection)\r\n  return newCollection\r\n}\r\n\r\nexport function updateCollection(collectionName, newCollection){\r\n  const collection = JSON.stringify(newCollection)\r\n  window.localStorage.setItem(collectionName, collection)\r\n}","import React, {useState} from 'react'\r\nimport * as api from '../../../util/localAPI'\r\nimport styles from './Film.module.css'\r\nconst Project = (props) => {\r\n \r\n  const [film, setFilm] = useState([])\r\n\r\n  const getDetails = async () => {\r\n    let details = await fetchFilms(props.id)\r\n    setFilm(details)\r\n  }\r\n  if(film.length === 0){\r\n    getDetails()\r\n  }\r\n  const getGenres = () => {\r\n    let genres = \"\"\r\n    if(film.genres !== undefined){\r\n      genres = film.genres.map(genre => \"/ \"+genre.name+\" /\").concat()\r\n      console.log(genres);\r\n    }\r\n  return <p>{genres}</p>\r\n  }\r\n  const addClick = (event, film) => {\r\n    const forLocalStorage = {\r\n      id: film.id,\r\n      body: film\r\n    }\r\n    api.addItem('Films', forLocalStorage)\r\n  }\r\n    return (\r\n      <div className={styles.container}>\r\n        <h1>{film.original_title}</h1>\r\n        <p className={styles.add} onClick={(e)=> addClick(e, film)}>+</p>\r\n        <img src={`https://image.tmdb.org/t/p/original${film.backdrop_path}`} alt=\"\"/>\r\n        {getGenres()}\r\n        <div className={styles.infos}>\r\n          <p>Release date : <br/>{film.release_date}</p>\r\n          <p>Status : {film.status} </p>\r\n          <p className={styles.popularity}><br/>{film.popularity} *</p>\r\n          <p>Original language : {film.original_language} </p>\r\n        </div>\r\n        <p className={styles.overview}>{film.overview}</p>\r\n      </div>\r\n    )\r\n}\r\nasync function fetchFilms(id){\r\n  let response = await fetch(`/api/film/${id}`)\r\n  let data = await response.json()\r\n  return data\r\n}\r\nexport default Project\r\n","import React, { useState } from 'react'\r\nimport * as api from '../../../util/localAPI'\r\nimport FilmCard from '../Home/Results/FilmCard'\r\nimport styles from './MyFilms.module.css'\r\nconst MyFilms = () => {\r\n  //Check l'existence de la collection dans le local storage\r\n  if(!Boolean(api.getCollection(\"Films\"))){\r\n    api.newCollection(\"Films\")\r\n  }\r\n  //Update state from Local Storage\r\n  const [list, setList] = useState(api.getCollection(\"Films\")) \r\n\r\n  const onClick = (e, id) => {\r\n    api.deleteItem(\"Films\", id)\r\n    setList(api.getCollection(\"Films\"))\r\n\r\n  }\r\n  const card = list.map(film => {\r\n    console.log(film);\r\n    return <FilmCard \r\n    key={film.id} \r\n    id={film.id}\r\n    title={film.body.title}\r\n    img={film.body.poster_path}\r\n    body={film.body.overview}\r\n    onClick = {onClick} \r\n    />\r\n  })\r\n  return (\r\n    <div className={styles.container}>\r\n      {card}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyFilms\r\n","import React, { useState } from \"react\";\r\nimport Home from \"./Home/Home\";\r\nimport Film from \"./Film/Film\";\r\nimport MyFilms from \"./Myfilms/MyFilms\";\r\n\r\nconst Pages = () => {\r\n  //Get hash from the browser\r\n  const [location, setLocation] = useState(window.location.hash);\r\n\r\n  //Page components\r\n  const [pages, setPages] = useState([\r\n    {\r\n      hash: \"#home\",\r\n      page: <Home onClick={cardClickHandler}/>\r\n    },\r\n    {\r\n      hash: \"#film\",\r\n      page: <Film />\r\n    },\r\n    {\r\n      hash: \"#myfilms\",\r\n      page: <MyFilms />\r\n    }\r\n  ]);\r\n\r\n //If hash is empty, changing to home\r\n if (location === \"\" || location === undefined) {\r\n  window.location.hash = \"#home\";\r\n  setLocation(window.location.hash);\r\n}\r\n\r\n//Gere le hashChange event \r\n  //Cleanup on render \r\neventCleaner(hashChangeHandler)\r\n  //Resetup du listener\r\nhashChangeListener(hashChangeHandler)\r\n  //Update state\r\nfunction hashChangeHandler(e) {\r\n  setLocation(window.location.hash)\r\n}\r\n\r\n\r\n//Gere le clique d'un film \r\nfunction cardClickHandler (event, id){\r\n  //Update page State avec Film ID\r\n    let newState = [...pages]\r\n    newState[1].page = <Film id={id}/>\r\n    setPages(newState)\r\n  //Change le Hash\r\n    window.location.hash = \"#film\";\r\n    setLocation(\"#film\")\r\n  }\r\n  // Génère les boutons de navigation ============================================\r\n\r\n  //Navigation on click\r\n  const buttonHandler = (event, button) => {\r\n    const newHash = button;\r\n    window.location.hash = button;\r\n    //Update Location state \r\n    setLocation(newHash);\r\n  };\r\n\r\n  //Créer les boutons\r\n  const button = () => {\r\n    return pages\r\n    //Map chaque pages et extrait le hash\r\n      .map(page => page.hash)\r\n      //Pour chaque hash map les boutons\r\n      // eslint-disable-next-line\r\n      .map(button => {\r\n        //Pas de boutons pour aller vers les infos d'un film // (Géré par la card quand click)\r\n        if(button !== \"#film\"){\r\n          return <button \r\n            key={button} \r\n            onClick={e => buttonHandler(e, button)}>\r\n            {button}\r\n          </button>\r\n        }\r\n      });\r\n  };\r\n\r\n//Gere le JSX a render pour les pages\r\n  const pageHandle = () => {\r\n    //Extrait la page correspondant au hash depuis le state\r\n    let [page] = pages.filter(p => {\r\n      return p.hash === location;\r\n    });\r\n    console.log(page);\r\n    //Fix error on first launch\r\n    if(page === undefined) return \r\n    //Renvoi le JSX correspondant\r\n    return page.page;\r\n  };\r\n\r\n  return (\r\n    <div className={\"pages\"}>\r\n  {/* ==== Navigation ==== */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-evenly\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          width: \"100%\",\r\n          marginTop: \".5rem\"\r\n        }}\r\n      >\r\n        {button()}\r\n      </div>\r\n  {/* ==== End of Navigation ==== */}\r\n  {/* ==== View ==== */}\r\n      {pageHandle()}\r\n  {/* ==== End of View ==== */}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n// Supr le listener\r\nfunction eventCleaner(event) {\r\n  window.removeEventListener(\"hashchange\", event)\r\n}\r\n//Add le\r\nfunction hashChangeListener(cb) {\r\n  window.addEventListener('hashchange', cb)\r\n}\r\nexport default Pages;\r\n","import React from 'react';\nimport Header from './Header/Header'\nimport Pages from './Pages/Pages'\nimport './App.module.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Pages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}